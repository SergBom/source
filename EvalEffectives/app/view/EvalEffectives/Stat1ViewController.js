/*
 * File: app/view/EvalEffectives/Stat1ViewController.js
 *
 * This file was generated by Sencha Architect
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 6.2.x Classic library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 6.2.x Classic. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('Portal.view.EvalEffectives.Stat1ViewController', {
    extend: 'Ext.app.ViewController',
    alias: 'controller.evaleffectivesstat1',

    onButtonClick: function(button, e, eOpts) {
        var ref=this.getReferences(),wd=60,
            gg=ref.grid,
            db=ref.dateB.getValue(),
            de=ref.dateE.getValue();
        //console.log(db);console.log(de);
        var fields_temp=[],
            newcolumns=[
            {xtype: 'rownumberer'},
            {dataIndex:'Punkt',header:'Пункт',name:'Punkt',width:60,locked:true},
            {dataIndex:'C1',header:'Параметр',name:'C1',locked:true},
            {dataIndex:'C2',header:'Расшифровка',name:'C2',cellWrap:true,locked:true},
            {xtype: 'gridcolumn',
                text: 'Сумма по Управлению',
                tooltip: 'Сумма по Управлению',
                locked:true,
                columns: [
                {dataIndex:'summProc',header:'Равно,%',name:'summProc',
                    tdCls:'f-blue',
                    width:wd,
                    align: 'right',
                    renderer: function(value, metaData, record, rowIndex, colIndex, store, view) {
                        if(value>0){return "<b>"+value+"</b>";}
                        else if(value<0){return "<font color='green'>"+value+"</font>";}
                        else{return value;}
                    }
                },
                {dataIndex:'summBall',header:'Баллов',name:'summBall',
                    tdCls:'f-blue',
                    width:wd,
                    align: 'right',
                    renderer: function(value, metaData, record, rowIndex, colIndex, store, view) {
                        if(value>0){return "<b>"+value+"</b>";}
                        else if(value<0){return "<font color='green'>"+value+"</font>";}
                        else{return value;}
                    }
                }]
            }
            ];
        // Список значений таблицы
        var Gstore = Ext.getStore('EvalEffectives.Stat1');
        // Список полей таблицы
        var storeOtdels = this.getViewModel().getStore('otdels');
        //Ext.getStore('EvalEffectives.OtdelsList');
        //console.log(storeOtdels.getData());
        storeOtdels.load();
        storeOtdels.on('load', function(storeRef, records, successful){
            //создаем поля каждой группе
            storeOtdels.each(function(record){
                //console.log(record.get('cn')+'Proc');
                //console.log(record.get('cn')+'Ball');
                var o=[];
                if(record.get('cn')!=='summ'){
                    var tempvar;
                    tempvar={
                        dataIndex:record.get('cn')+'Proc',
                        header:'Равно',
                        width:wd,
                        name:record.get('cn')+'Proc',
                        align:'right',
                        renderer:function(vl,m,r,row,col,s,v){
                            if(vl>0){return "<b>"+vl+"</b>";}
                            else if(vl<0){return "<font color='green'>"+vl+"</font>";}
                            else{return vl;}
                        }
                    };
                    o.push(tempvar);
                    tempvar={
                        dataIndex:record.get('cn')+'Ball',
                        header:'Баллов',
                        width:wd,
                        name:record.get('cn')+'Ball',
                        align:'right',
                        renderer:function(vl,m,r,row,col,s,v){
                            if(vl>0){return "<b>"+vl+"</b>";}
                            else if(vl<0){return "<font color='green'>"+vl+"</font>";}
                            else{return vl;}
                        }
                    };
                    o.push(tempvar);

                    newcolumns.push({
                        xtype:'gridcolumn',
                        text:record.get('sname'),
                        tooltip:record.get('name'),
                    columns:o});
                }
            });

            gg.reconfigure(Gstore, newcolumns);
        }, this);
        gg.setStore(Gstore);
        Gstore.load({params:{db:db,de:de}});

        Ext.Ajax.request({
            url: 'data/EvalEffectives/getQrab.php',
            params:{
                db:db,de:de
            },
            success: function(r,o) {
                //var obj =
                this.getReferences().Q_rab.setValue(
                Ext.decode(r.responseText).data.Q_rab);
                //console.dir(obj);
            },

            failure: function(response, opts) {
                console.log('server-side failure with status code ' + response.status);
            },
            scope:this
        });
    },

    onWindowAfterRender: function(component, eOpts) {
        var de=new Date(),
            db=new Date(de.getFullYear(),de.getMonth(),1),
            r=this.getReferences();
        r.dateB.setValue(db);
        r.dateE.setValue(de);
    }

});
