/*
 * File: app/view/DCV/ObjEditViewController.js
 *
 * This file was generated by Sencha Architect version 4.1.1.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 6.2.x Classic library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 6.2.x Classic. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('Portal.view.DCV.ObjEditViewController', {
    extend: 'Ext.app.ViewController',
    alias: 'controller.dcv.objedit',

    ObjectSave: function(a, b) {
        var me=this,ref=me.getReferences(),
        f=me.getView().down('form').getForm(),v=f.getValues();
        //nTab=ref.TabPanel.getActiveTab().getReference()[3];
        //Сохраняем Основные данные
        //Возвращаем ID записи


        //st=Ext.getStore('EvalEffectives.ParamsOut');
        //if(f.isValid()) {
        me.getView().mask('Подождите...');
        Ext.Ajax.request({
            url:'data/DCV/ObjectEdit-post.php',
            params:v,
            success:function(r){//st.reload();
                //console.log( Portal.util.Util.decodeJSON( r.responseText ) );
                //f.setValues({id:Portal.util.Util.decodeJSON(r.responseText).data });
            },
            failure:function(r,o){Ext.Msg.alert('ERROR!',r);}
        });
        me.getView().unmask();
    },

    onSaveClick: function(button, e, eOpts) {
        this.ObjectSave();
        this.getView().close();
    },

    onCancelClick: function(button, e, eOpts) {
        this.getView().close();
    },

    onON_PloschadChange: function(field, newValue, oldValue, eOpts) {
        var r=this.getReferences(),Rstoim=r.RynStoimost.getValue();
        r.OneMeterStoimost.setValue( Rstoim / newValue );
    },

    onNumberfieldChange: function(field, newValue, oldValue, eOpts) {
        var r=this.getReferences(),Rstoim=r.RynStoimost.getValue();
    },

    onCSROadd: function(button, e, eOpts) {

        var r= this.getReferences();
        console.log("111");
        var bSRO = r.blockSRO.add(
        {
            xtype: 'container',
            layout: {
                type: 'hbox',
                align: 'stretch'
            },
            items: [{
                xtype: 'textfield',
                flex: 1,
                name: 'SRO[]'
            },{
                xtype: 'button',
                iconCls: 'icon-add',
                text: '',
                listeners: {
                    click: {
                        fn: 'onCSROadd',
                        scope: 'controller'
                    }
                }
            }/*,{
                xtype: 'button',
                iconCls: 'icon-delete',
                listeners: {
                    click: {
                        fn: 'onCSROdel',
                        scope: 'controller'
                    }
                }
            }*/
        ]});
    },

    onWindowAfterRender: function(component, eOpts) {
        var ref=this.getReferences();
        ref.BlockZemlya.setHidden(true);
        ref.BlockOKS.setHidden(true);
        console.log('Osnovanie=>'+ref.Osnovanie.getValue());
    }

});
